//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/WcfService4")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Player Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Player Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Team Team1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Team Team2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Player Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Player Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Team Team1 {
            get {
                return this.Team1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Team1Field, value) != true)) {
                    this.Team1Field = value;
                    this.RaisePropertyChanged("Team1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Team Team2 {
            get {
                return this.Team2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Team2Field, value) != true)) {
                    this.Team2Field = value;
                    this.RaisePropertyChanged("Team2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinnerId {
            get {
                return this.WinnerIdField;
            }
            set {
                if ((this.WinnerIdField.Equals(value) != true)) {
                    this.WinnerIdField = value;
                    this.RaisePropertyChanged("WinnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WinnerName {
            get {
                return this.WinnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerNameField, value) != true)) {
                    this.WinnerNameField = value;
                    this.RaisePropertyChanged("WinnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/WcfService4")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamID {
            get {
                return this.TeamIDField;
            }
            set {
                if ((this.TeamIDField.Equals(value) != true)) {
                    this.TeamIDField = value;
                    this.RaisePropertyChanged("TeamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Team", Namespace="http://schemas.datacontract.org/2004/07/WcfService4")]
    [System.SerializableAttribute()]
    public partial class Team : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Player[] PlayersInTeamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Player[] PlayersInTeam {
            get {
                return this.PlayersInTeamField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersInTeamField, value) != true)) {
                    this.PlayersInTeamField = value;
                    this.RaisePropertyChanged("PlayersInTeam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName {
            get {
                return this.TeamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamNameField, value) != true)) {
                    this.TeamNameField = value;
                    this.RaisePropertyChanged("TeamName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Move", Namespace="http://schemas.datacontract.org/2004/07/WcfService4")]
    [System.SerializableAttribute()]
    public partial class Move : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Game GameOfMoveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MoveIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoveStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Player PlayerOfMoveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Game GameOfMove {
            get {
                return this.GameOfMoveField;
            }
            set {
                if ((object.ReferenceEquals(this.GameOfMoveField, value) != true)) {
                    this.GameOfMoveField = value;
                    this.RaisePropertyChanged("GameOfMove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MoveId {
            get {
                return this.MoveIdField;
            }
            set {
                if ((this.MoveIdField.Equals(value) != true)) {
                    this.MoveIdField = value;
                    this.RaisePropertyChanged("MoveId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoveString {
            get {
                return this.MoveStringField;
            }
            set {
                if ((object.ReferenceEquals(this.MoveStringField, value) != true)) {
                    this.MoveStringField = value;
                    this.RaisePropertyChanged("MoveString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Player PlayerOfMove {
            get {
                return this.PlayerOfMoveField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerOfMoveField, value) != true)) {
                    this.PlayerOfMoveField = value;
                    this.RaisePropertyChanged("PlayerOfMove");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService2", CallbackContract=typeof(WebApplication1.ServiceReference1.IService2Callback))]
    public interface IService2 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/DoWork", ReplyAction="http://tempuri.org/IService2/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService2/DoWork", ReplyAction="http://tempuri.org/IService2/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/LogIn")]
        void LogIn(string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/LogIn")]
        System.Threading.Tasks.Task LogInAsync(string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/SerchingForOponent")]
        void SerchingForOponent(string playerString);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/SerchingForOponent")]
        System.Threading.Tasks.Task SerchingForOponentAsync(string playerString);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendMove")]
        void sendMove([System.ServiceModel.MessageParameterAttribute(Name="sendMove")] string sendMove1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendMove")]
        System.Threading.Tasks.Task sendMoveAsync(string sendMove);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/endGameServer")]
        void endGameServer(WebApplication1.ServiceReference1.Game g, WebApplication1.ServiceReference1.Move[] MoveList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/endGameServer")]
        System.Threading.Tasks.Task endGameServerAsync(WebApplication1.ServiceReference1.Game g, WebApplication1.ServiceReference1.Move[] MoveList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/endTeamGameServer")]
        void endTeamGameServer(WebApplication1.ServiceReference1.Game game, WebApplication1.ServiceReference1.Team winner, WebApplication1.ServiceReference1.Move[] AllMoves);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/endTeamGameServer")]
        System.Threading.Tasks.Task endTeamGameServerAsync(WebApplication1.ServiceReference1.Game game, WebApplication1.ServiceReference1.Team winner, WebApplication1.ServiceReference1.Move[] AllMoves);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/endGameServer2")]
        void endGameServer2(WebApplication1.ServiceReference1.Game g);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/endGameServer2")]
        System.Threading.Tasks.Task endGameServer2Async(WebApplication1.ServiceReference1.Game g);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/LogInTeam")]
        void LogInTeam(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/LogInTeam")]
        System.Threading.Tasks.Task LogInTeamAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/SerchingForOponentTeam")]
        void SerchingForOponentTeam(WebApplication1.ServiceReference1.Team team);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/SerchingForOponentTeam")]
        System.Threading.Tasks.Task SerchingForOponentTeamAsync(WebApplication1.ServiceReference1.Team team);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendMoveTeam")]
        void sendMoveTeam(WebApplication1.ServiceReference1.Team team, WebApplication1.ServiceReference1.Move move, string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendMoveTeam")]
        System.Threading.Tasks.Task sendMoveTeamAsync(WebApplication1.ServiceReference1.Team team, WebApplication1.ServiceReference1.Move move, string color);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService2Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/CallBackFunc")]
        void CallBackFunc(string str);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendPlayer")]
        void sendPlayer(string playerString);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendGame")]
        void sendGame(string gameString);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/ReseveMove")]
        void ReseveMove(string moveString, string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/ReseveMoveTeam")]
        void ReseveMoveTeam(WebApplication1.ServiceReference1.Move m, string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendTeam")]
        void sendTeam(WebApplication1.ServiceReference1.Team t);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService2/sendTeamGame")]
        void sendTeamGame(WebApplication1.ServiceReference1.Game game);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService2Channel : WebApplication1.ServiceReference1.IService2, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service2Client : System.ServiceModel.DuplexClientBase<WebApplication1.ServiceReference1.IService2>, WebApplication1.ServiceReference1.IService2 {
        
        public Service2Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service2Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service2Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service2Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public void LogIn(string name, string email) {
            base.Channel.LogIn(name, email);
        }
        
        public System.Threading.Tasks.Task LogInAsync(string name, string email) {
            return base.Channel.LogInAsync(name, email);
        }
        
        public void SerchingForOponent(string playerString) {
            base.Channel.SerchingForOponent(playerString);
        }
        
        public System.Threading.Tasks.Task SerchingForOponentAsync(string playerString) {
            return base.Channel.SerchingForOponentAsync(playerString);
        }
        
        public void sendMove(string sendMove1) {
            base.Channel.sendMove(sendMove1);
        }
        
        public System.Threading.Tasks.Task sendMoveAsync(string sendMove) {
            return base.Channel.sendMoveAsync(sendMove);
        }
        
        public void endGameServer(WebApplication1.ServiceReference1.Game g, WebApplication1.ServiceReference1.Move[] MoveList) {
            base.Channel.endGameServer(g, MoveList);
        }
        
        public System.Threading.Tasks.Task endGameServerAsync(WebApplication1.ServiceReference1.Game g, WebApplication1.ServiceReference1.Move[] MoveList) {
            return base.Channel.endGameServerAsync(g, MoveList);
        }
        
        public void endTeamGameServer(WebApplication1.ServiceReference1.Game game, WebApplication1.ServiceReference1.Team winner, WebApplication1.ServiceReference1.Move[] AllMoves) {
            base.Channel.endTeamGameServer(game, winner, AllMoves);
        }
        
        public System.Threading.Tasks.Task endTeamGameServerAsync(WebApplication1.ServiceReference1.Game game, WebApplication1.ServiceReference1.Team winner, WebApplication1.ServiceReference1.Move[] AllMoves) {
            return base.Channel.endTeamGameServerAsync(game, winner, AllMoves);
        }
        
        public void endGameServer2(WebApplication1.ServiceReference1.Game g) {
            base.Channel.endGameServer2(g);
        }
        
        public System.Threading.Tasks.Task endGameServer2Async(WebApplication1.ServiceReference1.Game g) {
            return base.Channel.endGameServer2Async(g);
        }
        
        public void LogInTeam(string name) {
            base.Channel.LogInTeam(name);
        }
        
        public System.Threading.Tasks.Task LogInTeamAsync(string name) {
            return base.Channel.LogInTeamAsync(name);
        }
        
        public void SerchingForOponentTeam(WebApplication1.ServiceReference1.Team team) {
            base.Channel.SerchingForOponentTeam(team);
        }
        
        public System.Threading.Tasks.Task SerchingForOponentTeamAsync(WebApplication1.ServiceReference1.Team team) {
            return base.Channel.SerchingForOponentTeamAsync(team);
        }
        
        public void sendMoveTeam(WebApplication1.ServiceReference1.Team team, WebApplication1.ServiceReference1.Move move, string color) {
            base.Channel.sendMoveTeam(team, move, color);
        }
        
        public System.Threading.Tasks.Task sendMoveTeamAsync(WebApplication1.ServiceReference1.Team team, WebApplication1.ServiceReference1.Move move, string color) {
            return base.Channel.sendMoveTeamAsync(team, move, color);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterPlayer", ReplyAction="http://tempuri.org/IService1/RegisterPlayerResponse")]
        string RegisterPlayer(string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterPlayer", ReplyAction="http://tempuri.org/IService1/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<string> RegisterPlayerAsync(string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayers", ReplyAction="http://tempuri.org/IService1/getAllPlayersResponse")]
        WebApplication1.ServiceReference1.Player[] getAllPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayers", ReplyAction="http://tempuri.org/IService1/getAllPlayersResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Player[]> getAllPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGames", ReplyAction="http://tempuri.org/IService1/getAllGamesResponse")]
        WebApplication1.ServiceReference1.Game[] getAllGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGames", ReplyAction="http://tempuri.org/IService1/getAllGamesResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Game[]> getAllGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGamesForCombo", ReplyAction="http://tempuri.org/IService1/getAllGamesForComboResponse")]
        string[] getAllGamesForCombo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGamesForCombo", ReplyAction="http://tempuri.org/IService1/getAllGamesForComboResponse")]
        System.Threading.Tasks.Task<string[]> getAllGamesForComboAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayersNames", ReplyAction="http://tempuri.org/IService1/getAllPlayersNamesResponse")]
        string[] getAllPlayersNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayersNames", ReplyAction="http://tempuri.org/IService1/getAllPlayersNamesResponse")]
        System.Threading.Tasks.Task<string[]> getAllPlayersNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGameOfPlayer", ReplyAction="http://tempuri.org/IService1/GetAllGameOfPlayerResponse")]
        WebApplication1.ServiceReference1.Game[] GetAllGameOfPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGameOfPlayer", ReplyAction="http://tempuri.org/IService1/GetAllGameOfPlayerResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Game[]> GetAllGameOfPlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlayersOfGame", ReplyAction="http://tempuri.org/IService1/GetAllPlayersOfGameResponse")]
        WebApplication1.ServiceReference1.Player[] GetAllPlayersOfGame(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlayersOfGame", ReplyAction="http://tempuri.org/IService1/GetAllPlayersOfGameResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Player[]> GetAllPlayersOfGameAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMovesOfGame", ReplyAction="http://tempuri.org/IService1/GetAllMovesOfGameResponse")]
        WebApplication1.ServiceReference1.Move[] GetAllMovesOfGame(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMovesOfGame", ReplyAction="http://tempuri.org/IService1/GetAllMovesOfGameResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Move[]> GetAllMovesOfGameAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameById", ReplyAction="http://tempuri.org/IService1/GetGameByIdResponse")]
        WebApplication1.ServiceReference1.Game GetGameById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameById", ReplyAction="http://tempuri.org/IService1/GetGameByIdResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Game> GetGameByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterPlayerWithTeam", ReplyAction="http://tempuri.org/IService1/RegisterPlayerWithTeamResponse")]
        string RegisterPlayerWithTeam(string name, string email, string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterPlayerWithTeam", ReplyAction="http://tempuri.org/IService1/RegisterPlayerWithTeamResponse")]
        System.Threading.Tasks.Task<string> RegisterPlayerWithTeamAsync(string name, string email, string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/registerTeam", ReplyAction="http://tempuri.org/IService1/registerTeamResponse")]
        string registerTeam(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/registerTeam", ReplyAction="http://tempuri.org/IService1/registerTeamResponse")]
        System.Threading.Tasks.Task<string> registerTeamAsync(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayers2", ReplyAction="http://tempuri.org/IService1/getAllPlayers2Response")]
        string getAllPlayers2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayers2", ReplyAction="http://tempuri.org/IService1/getAllPlayers2Response")]
        System.Threading.Tasks.Task<string> getAllPlayers2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGames2", ReplyAction="http://tempuri.org/IService1/getAllGames2Response")]
        string getAllGames2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGames2", ReplyAction="http://tempuri.org/IService1/getAllGames2Response")]
        System.Threading.Tasks.Task<string> getAllGames2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGamesForCombo2", ReplyAction="http://tempuri.org/IService1/getAllGamesForCombo2Response")]
        string getAllGamesForCombo2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllGamesForCombo2", ReplyAction="http://tempuri.org/IService1/getAllGamesForCombo2Response")]
        System.Threading.Tasks.Task<string> getAllGamesForCombo2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayersNames2", ReplyAction="http://tempuri.org/IService1/getAllPlayersNames2Response")]
        string getAllPlayersNames2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllPlayersNames2", ReplyAction="http://tempuri.org/IService1/getAllPlayersNames2Response")]
        System.Threading.Tasks.Task<string> getAllPlayersNames2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGameOfPlayer2", ReplyAction="http://tempuri.org/IService1/GetAllGameOfPlayer2Response")]
        string GetAllGameOfPlayer2(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGameOfPlayer2", ReplyAction="http://tempuri.org/IService1/GetAllGameOfPlayer2Response")]
        System.Threading.Tasks.Task<string> GetAllGameOfPlayer2Async(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlayersOfGame2", ReplyAction="http://tempuri.org/IService1/GetAllPlayersOfGame2Response")]
        string GetAllPlayersOfGame2(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlayersOfGame2", ReplyAction="http://tempuri.org/IService1/GetAllPlayersOfGame2Response")]
        System.Threading.Tasks.Task<string> GetAllPlayersOfGame2Async(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMovesOfGame2", ReplyAction="http://tempuri.org/IService1/GetAllMovesOfGame2Response")]
        string GetAllMovesOfGame2(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMovesOfGame2", ReplyAction="http://tempuri.org/IService1/GetAllMovesOfGame2Response")]
        System.Threading.Tasks.Task<string> GetAllMovesOfGame2Async(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameById2", ReplyAction="http://tempuri.org/IService1/GetGameById2Response")]
        string GetGameById2(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameById2", ReplyAction="http://tempuri.org/IService1/GetGameById2Response")]
        System.Threading.Tasks.Task<string> GetGameById2Async(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountPlayerGames", ReplyAction="http://tempuri.org/IService1/CountPlayerGamesResponse")]
        string CountPlayerGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountPlayerGames", ReplyAction="http://tempuri.org/IService1/CountPlayerGamesResponse")]
        System.Threading.Tasks.Task<string> CountPlayerGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePlayer", ReplyAction="http://tempuri.org/IService1/DeletePlayerResponse")]
        string DeletePlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePlayer", ReplyAction="http://tempuri.org/IService1/DeletePlayerResponse")]
        System.Threading.Tasks.Task<string> DeletePlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGame", ReplyAction="http://tempuri.org/IService1/DeleteGameResponse")]
        string DeleteGame(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGame", ReplyAction="http://tempuri.org/IService1/DeleteGameResponse")]
        System.Threading.Tasks.Task<string> DeleteGameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePlayer", ReplyAction="http://tempuri.org/IService1/UpdatePlayerResponse")]
        string UpdatePlayer(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePlayer", ReplyAction="http://tempuri.org/IService1/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<string> UpdatePlayerAsync(string data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebApplication1.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApplication1.ServiceReference1.IService1>, WebApplication1.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RegisterPlayer(string name, string email) {
            return base.Channel.RegisterPlayer(name, email);
        }
        
        public System.Threading.Tasks.Task<string> RegisterPlayerAsync(string name, string email) {
            return base.Channel.RegisterPlayerAsync(name, email);
        }
        
        public WebApplication1.ServiceReference1.Player[] getAllPlayers() {
            return base.Channel.getAllPlayers();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Player[]> getAllPlayersAsync() {
            return base.Channel.getAllPlayersAsync();
        }
        
        public WebApplication1.ServiceReference1.Game[] getAllGames() {
            return base.Channel.getAllGames();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Game[]> getAllGamesAsync() {
            return base.Channel.getAllGamesAsync();
        }
        
        public string[] getAllGamesForCombo() {
            return base.Channel.getAllGamesForCombo();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllGamesForComboAsync() {
            return base.Channel.getAllGamesForComboAsync();
        }
        
        public string[] getAllPlayersNames() {
            return base.Channel.getAllPlayersNames();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllPlayersNamesAsync() {
            return base.Channel.getAllPlayersNamesAsync();
        }
        
        public WebApplication1.ServiceReference1.Game[] GetAllGameOfPlayer(string name) {
            return base.Channel.GetAllGameOfPlayer(name);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Game[]> GetAllGameOfPlayerAsync(string name) {
            return base.Channel.GetAllGameOfPlayerAsync(name);
        }
        
        public WebApplication1.ServiceReference1.Player[] GetAllPlayersOfGame(int gameId) {
            return base.Channel.GetAllPlayersOfGame(gameId);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Player[]> GetAllPlayersOfGameAsync(int gameId) {
            return base.Channel.GetAllPlayersOfGameAsync(gameId);
        }
        
        public WebApplication1.ServiceReference1.Move[] GetAllMovesOfGame(int gameId) {
            return base.Channel.GetAllMovesOfGame(gameId);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Move[]> GetAllMovesOfGameAsync(int gameId) {
            return base.Channel.GetAllMovesOfGameAsync(gameId);
        }
        
        public WebApplication1.ServiceReference1.Game GetGameById(int id) {
            return base.Channel.GetGameById(id);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Game> GetGameByIdAsync(int id) {
            return base.Channel.GetGameByIdAsync(id);
        }
        
        public string RegisterPlayerWithTeam(string name, string email, string teamName) {
            return base.Channel.RegisterPlayerWithTeam(name, email, teamName);
        }
        
        public System.Threading.Tasks.Task<string> RegisterPlayerWithTeamAsync(string name, string email, string teamName) {
            return base.Channel.RegisterPlayerWithTeamAsync(name, email, teamName);
        }
        
        public string registerTeam(string teamName) {
            return base.Channel.registerTeam(teamName);
        }
        
        public System.Threading.Tasks.Task<string> registerTeamAsync(string teamName) {
            return base.Channel.registerTeamAsync(teamName);
        }
        
        public string getAllPlayers2() {
            return base.Channel.getAllPlayers2();
        }
        
        public System.Threading.Tasks.Task<string> getAllPlayers2Async() {
            return base.Channel.getAllPlayers2Async();
        }
        
        public string getAllGames2() {
            return base.Channel.getAllGames2();
        }
        
        public System.Threading.Tasks.Task<string> getAllGames2Async() {
            return base.Channel.getAllGames2Async();
        }
        
        public string getAllGamesForCombo2() {
            return base.Channel.getAllGamesForCombo2();
        }
        
        public System.Threading.Tasks.Task<string> getAllGamesForCombo2Async() {
            return base.Channel.getAllGamesForCombo2Async();
        }
        
        public string getAllPlayersNames2() {
            return base.Channel.getAllPlayersNames2();
        }
        
        public System.Threading.Tasks.Task<string> getAllPlayersNames2Async() {
            return base.Channel.getAllPlayersNames2Async();
        }
        
        public string GetAllGameOfPlayer2(string name) {
            return base.Channel.GetAllGameOfPlayer2(name);
        }
        
        public System.Threading.Tasks.Task<string> GetAllGameOfPlayer2Async(string name) {
            return base.Channel.GetAllGameOfPlayer2Async(name);
        }
        
        public string GetAllPlayersOfGame2(string gameId) {
            return base.Channel.GetAllPlayersOfGame2(gameId);
        }
        
        public System.Threading.Tasks.Task<string> GetAllPlayersOfGame2Async(string gameId) {
            return base.Channel.GetAllPlayersOfGame2Async(gameId);
        }
        
        public string GetAllMovesOfGame2(string gameId) {
            return base.Channel.GetAllMovesOfGame2(gameId);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMovesOfGame2Async(string gameId) {
            return base.Channel.GetAllMovesOfGame2Async(gameId);
        }
        
        public string GetGameById2(string id) {
            return base.Channel.GetGameById2(id);
        }
        
        public System.Threading.Tasks.Task<string> GetGameById2Async(string id) {
            return base.Channel.GetGameById2Async(id);
        }
        
        public string CountPlayerGames() {
            return base.Channel.CountPlayerGames();
        }
        
        public System.Threading.Tasks.Task<string> CountPlayerGamesAsync() {
            return base.Channel.CountPlayerGamesAsync();
        }
        
        public string DeletePlayer(string name) {
            return base.Channel.DeletePlayer(name);
        }
        
        public System.Threading.Tasks.Task<string> DeletePlayerAsync(string name) {
            return base.Channel.DeletePlayerAsync(name);
        }
        
        public string DeleteGame(string name) {
            return base.Channel.DeleteGame(name);
        }
        
        public System.Threading.Tasks.Task<string> DeleteGameAsync(string name) {
            return base.Channel.DeleteGameAsync(name);
        }
        
        public string UpdatePlayer(string data) {
            return base.Channel.UpdatePlayer(data);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePlayerAsync(string data) {
            return base.Channel.UpdatePlayerAsync(data);
        }
    }
}
